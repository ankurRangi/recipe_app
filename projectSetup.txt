
# Setting up System.

1. Create Git Repo
2. Create dockerhub access token
3. Git Repo Settings -> Actions -> Add access token with 
    i. Name: DOKERHUB_USER & Key: ankurRangi (dockerhub username)
    ii. Name: DOKERHUB_TOKEN & Key: (dockerhub access token)
4. Clone Git 


# Adding Requirements

5. Create requirements.txt
6. Create Dockerfile
7. Create dockerignore
8. [CMD] Test building docker image -> "docker build ."
9. Create docker-compose.yml
10. [CMD] Build the container with the yml servives file -> "docker-compose build"
11. Create requirements.dev.txt and add flake8 (Linting and Test for basic errors and inconsistancies). 
    We only need this requirement for checking errors and not necessary for deploying so we use it for dev requirements.
12. Add "Dev:true" in servives for yml file to access the dev settings.
13. Add args dev=flase in dockerfile to keep it as default.
14. [CMD] Run docker via yml file - "docker-compose build" 
15. Create .flake8 file in "app" folder to add the files needed to be ignored for linting.
16. [CMD] Run flake8 -> docker-compose run --rm app sh -c "flake8"


# Django Project (Using docker)

17. [CMD] Create django project using docker - docker-compose run --rm app sh -c "django-admin startproject app ." (. is important)
18. [CMD] Start your django server, "docker compose up"


# Github Actions

19. Create a root folder ".github/workflows"
20. Create checks.yml file.
21. [CMD] Run the command to check for Github Actions and linting -> docker-compose run --rm app sh -c "python manage.py test"


# Posgres Database Setup/Service

22. Open docker-compose.yml file and add the database (postgres) details in it.
23. [CMD] Run "docker compose up" to check it is working.


# Pyscopg2 (Postgres Adapter)

24. Add custom libraries to help in installing Psycopg2, add libraries in dockerfiler and delete them after installation.
25. Add the psycopg2 in requirements.txt file to install the adaptor for database setup.
26. [CMD] Run "docker compose build". To rebuild the container with new libraries.


# Setting up our Postgres DB with Django Project

27. Open settings.py file and add the new database details we created in dockerfile.
28. Delete the automatically create sqlite db from django project.
29. Now to avoid race conditions, we need to check for DB to start before the django project.
    
    a. Add a test for wait_for_db by creating a new django app "core". Delete tests.py and views.py file. 
    b. Create tests folder and add __int__.py file for python package.
    c. Under core app, Create folder management -> commands -> wait_for_db.py (each folder will have __init__.py file)
    d. Write the test first to test if the db is ready and then if any errors are arising.
    e. Write the function to test the db availablity.
    f. [CMD] Run the command - docker-compose run --rm app sh -c "python manage.py test"
    g. [CMD] OR you may check directly with docker-compose run --rm app sh -c "python manage.py wait_for_db"
    h. [CMD] check for linting as well, docker-compose run --rm app sh -c "python manage.py wait_for_db and flake8"

30. Add the wait_for_db and migrate command in docker-compose.yml file and wait_for_db in checks.yml file.


# Models

31. Create a User Model with email as the username and create your custom UserManager()
32. Create Test folder (with __init__.py file) under core app created, with all the file names starting with "test_"
33. Refer test_models.py
34. Run the tests, docker-compose run --rm app sh -c "python manage.py test && flake8"
35. Ensure email is properly entered and not some emply string, add validation to email field in the manager.


# Admin Interface

36. Create test_admin.py file for further tests.
37. [CMD] Create a superuser, docker-compose run --rm app sh -c "python manage.py createsuperuser"
38. Setup admin.py file to register model and add the USerAdmin class to customize the page with specific details to be shown and 
    Add basic details while adding a new user though our custom admin since earlier we were only creating User/SuperUser with just
    Email and Password (sometimes User Name), now inorder make the "Add New User" page workable, we need to setup the Admin class
    and mention the extra fields via Admin package.


# Swagger (API Documentation)

39. Install "drf-spectacular" module in requirements.txt
40. Add apps to settings.py file under core app,
    a. rest_framework
    b. drf-spectacular
41. Add REST_FRAMEWORK default schema class, 'drf-spectacular.openapi.AutoSchema'
42. Add URL for swagger in urls.py file with drf_spectacular.veiws.
43. [CMD] "docker-compose up" and hop on to "http://127.0.0.1:8000/api/docs/" and now you can see the documentation and SCHEMA with
    the link "/api/schema" on top left to download the schema .yml file.


# Building USER APIs

44. Create new App "user"
45. [CMD] docker-compose run --rm app sh -c "python manage.py startapp user"
46. Delete migrations, test.py, model.py and admin.py since all of those things will be under "core" app. 
46. Add the app under Installed_Apps in settings.py. 
47. Create a folder tests, start writing tests for the app, starting with "create user endpoint"
48. 