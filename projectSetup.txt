
# Setting up System.

1. Create Git Repo
2. Create dockerhub access token
3. Git Repo Settings -> Actions -> Add access token with 
    i. Name: DOKERHUB_USER & Key: ankurRangi (dockerhub username)
    ii. Name: DOKERHUB_TOKEN & Key: (dockerhub access token)
4. Clone Git 


# Adding Requirements

5. Create requirements.txt
6. Create Dockerfile
7. Create dockerignore
8. [CMD] Test building docker image -> "docker build ."
9. Create docker-compose.yml
10. [CMD] Build the container with the yml servives file -> "docker-compose build"
11. Create requirements.dev.txt and add flake8 (Linting and Test for basic errors and inconsistancies). 
    We only need this requirement for checking errors and not necessary for deploying so we use it for dev requirements.
12. Add "Dev:true" in servives for yml file to access the dev settings.
13. Add args dev=flase in dockerfile to keep it as default.
14. [CMD] Run docker via yml file - "docker-compose build" 
15. Create .flake8 file in "app" folder to add the files needed to be ignored for linting.
16. [CMD] Run flake8 -> docker-compose run --rm app sh -c "flake8"


# Django Project (Using docker)

17. [CMD] Create django project using docker - docker-compose run --rm app sh -c "django-admin startproject app ."
18. [CMD] Start your django server, "docker compose up"


# Github Actions

19. Create a root folder ".github/workflows"
20. Create checks.yml file.
21. [CMD] Run the command to check for Github Actions and linting - docker-compose run app sh -c "python manage.py test"


# Posgres Database Setup/Service

22. Open docker-compose.yml file and add the database (postgres) details in it.
23. [CMD] Run "docker compose up" to check it is working.


# Pyscopg2 (Postgres Adapter)

24. Add custom libraries to help in installing Psycopg2, add libraries in dockerfiler and delete them after installation.
25. Add the psycopg2 in requirements.txt file to install the adaptor for database setup.
26. [CMD] Run "docker compose build". To rebuild the container with new libraries.


# Setting up our Postgres DB with Django Project

27. Open settings.py file and add the new database details we created in dockerfile.
28. Delete the automatically create sqlite db from django project.
29. Now to avoid race conditions, we need to check for DB to start before the django project.
    
    a. Add a test for wait_for_db by creating a new django app "core". Delete tests.py and views.py file. 
    b. Create tests folder and add __int__.py file for python package.
    c. Under core app, Create folder management -> commands -> wait_for_db.py (each folder will have __init__.py file)
    d. Write the test first to test if the db is ready and then if any errors are arising.
    e. Write the function to test the db availablity.
    f. [CMD] Run the command - docker-compose run --rm app sh -c "python manage.py test"
    g. [CMD] OR you may check directly with docker-compose run --rm app sh -c "python manage.py wait_for_db"
    h. [CMD] check for linting as well, docker-compose run --rm app sh -c "python manage.py wait_for_db and flake8"

30. 